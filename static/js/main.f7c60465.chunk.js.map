{"version":3,"sources":["images/rock.svg","images/paper.svg","images/scissors.svg","utils/enums.js","redux/actions.js","redux/reducers.js","utils/routes.js","components/NavigationBar.js","containers/ConnectedNavigationBar.js","utils/GameLogic.js","utils/ScoreLogic.js","utils/config.js","redux/thunks.js","utils/apiCalls.js","components/OpponentRpsIcons.js","components/GameStatusText.js","components/PlayerRpsButtons.js","components/ScoreBox.js","components/GameView.js","containers/ConnectedGameView.js","components/MenuView.js","containers/ConnectedMenuView.js","components/LoginView.js","containers/ConnectedLoginView.js","components/ErrorAlert.js","containers/ConnectedErrorAlert.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","GameStatus","Enum","Init","Win","Loss","Tie","Rps","Rock","Paper","Scissors","previousErrorId","setBestScore","score","type","setCurrentScore","setPlayerSelection","selection","setOpponentSelection","setRoundResult","result","setIsAuthenticated","state","setAccessToken","token","setErrorMessage","message","id","initialScore","best","current","initialRound","playerSelection","opponentSelection","initialUser","isAuthenticated","accessToken","userName","intialError","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","round","user","name","error","routes","home","play","login","NavigationBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","isOpen","setState","displayGreetings","isLoggedIn","greetings","react_default","a","createElement","reactstrap_es","className","color","dark","expand","Link","to","onClick","navbar","NavLink","exact","activeClassName","React","Component","ConnectedNavigationBar","withRouter","connect","GameLogic","min","max","get","Math","ceil","floor","random","ScoreLogic","currentScore","gameResult","bestScore","API_DOMAIN","process","processRound","dispatch","getState","drawOpponentSelection","calculateRoundResult","calculateCurrentScore","isNewBestScore","init","method","body","JSON","stringify","headers","Headers","Authorization","content-type","fetch","sendBestScore","then","responseGoogleSuccess","response","history","profileObj","givenName","access_token","res","json","getTokenAndBestScore","push","catch","OpponentRpsIcons","images","rock","paper","scissors","icons","enums","map","item","index","selected","key","src","alt","GameStatusText","text","status","xs","PlayerRpsButtons","buttons","ScoreBox","sm","GameView","handleUnmount","src_components_ScoreBox","src_components_OpponentRpsIcons","components_GameStatusText","src_components_PlayerRpsButtons","handlePlayerRpsButtonClick","ConnectedGameView","MenuView","ConnectedMenuView","LoginView","loginButton","google_login","clientId","buttonText","onSuccess","handleGoogleLoginSuccess","onFailure","handleGoogleLoginFailure","logoutButton","onLogoutSuccess","handleLogout","size","offset","ConnectedLoginView","responseGoogleFailure","logout","ErrorAlert","visible","onDismiss","prevProps","prevState","errorId","location","errorMessage","ConnectedErrorAlert","App","containers_ConnectedNavigationBar","Switch","Route","path","component","containers_ConnectedErrorAlert","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","basename","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f7c60465.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.5f3bcdf4.svg\";","module.exports = __webpack_public_path__ + \"static/media/paper.18ca4182.svg\";","module.exports = __webpack_public_path__ + \"static/media/scissors.515fe2fe.svg\";","import Enum from 'enum';\r\n\r\nexport const GameStatus = new Enum({ Init: 0, Win: 1, Loss: 2, Tie: 3 });\r\n\r\nexport const Rps = new Enum({ Rock: 0, Paper: 1, Scissors: 2 });\r\n","export const SET_BEST_SCORE = 'SET_BEST_SCORE';\r\nexport const SET_CURRENT_SCORE = 'SET_CURRENT_SCORE';\r\nexport const SET_PLAYER_SELECTION = 'SET_PLAYER_SELECTION';\r\nexport const SET_OPPONENT_SELECTION = 'SET_OPPONENT_SELECTION';\r\nexport const SET_ROUND_RESULT = 'SET_ROUND_RESULT';\r\nexport const SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED';\r\nexport const SET_TOKEN = 'SET_TOKEN';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\n\r\nlet previousErrorId = 0;\r\n\r\nexport const setBestScore = score => ({\r\n  type: SET_BEST_SCORE,\r\n  score\r\n});\r\n\r\nexport const setCurrentScore = score => ({\r\n  type: SET_CURRENT_SCORE,\r\n  score\r\n});\r\n\r\nexport const setPlayerSelection = selection => ({\r\n  type: SET_PLAYER_SELECTION,\r\n  selection\r\n});\r\n\r\nexport const setOpponentSelection = selection => ({\r\n  type: SET_OPPONENT_SELECTION,\r\n  selection\r\n});\r\n\r\nexport const setRoundResult = result => ({\r\n  type: SET_ROUND_RESULT,\r\n  result\r\n});\r\n\r\nexport const setIsAuthenticated = state => ({\r\n  type: SET_IS_AUTHENTICATED,\r\n  state\r\n});\r\n\r\nexport const setAccessToken = token => ({\r\n  type: SET_TOKEN,\r\n  token\r\n});\r\n\r\nexport const setUserName = name => ({\r\n  type: SET_USERNAME,\r\n  name\r\n});\r\n\r\nexport const setErrorMessage = message => {\r\n  const id = previousErrorId + 1;\r\n  const action = {\r\n    type: SET_ERROR_MESSAGE,\r\n    message,\r\n    id\r\n  };\r\n  previousErrorId = id;\r\n  return action;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { GameStatus } from '../utils/enums';\r\nimport {\r\n  SET_BEST_SCORE,\r\n  SET_CURRENT_SCORE,\r\n  SET_PLAYER_SELECTION,\r\n  SET_OPPONENT_SELECTION,\r\n  SET_ROUND_RESULT,\r\n  SET_IS_AUTHENTICATED,\r\n  SET_TOKEN,\r\n  SET_USERNAME,\r\n  SET_ERROR_MESSAGE\r\n} from './actions';\r\n\r\nconst initialScore = {\r\n  best: 0,\r\n  current: 0\r\n};\r\n\r\nconst initialRound = {\r\n  playerSelection: null,\r\n  opponentSelection: null,\r\n  result: GameStatus.Init\r\n};\r\n\r\nconst initialUser = {\r\n  isAuthenticated: false,\r\n  accessToken: '',\r\n  userName: ''\r\n};\r\n\r\nconst intialError = {\r\n  message: ''\r\n};\r\n\r\nconst score = (state = initialScore, action) => {\r\n  switch (action.type) {\r\n    case SET_BEST_SCORE:\r\n      return { ...state, best: action.score };\r\n    case SET_CURRENT_SCORE:\r\n      return { ...state, current: action.score };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst round = (state = initialRound, action) => {\r\n  switch (action.type) {\r\n    case SET_PLAYER_SELECTION:\r\n      return { ...state, playerSelection: action.selection };\r\n    case SET_OPPONENT_SELECTION:\r\n      return { ...state, opponentSelection: action.selection };\r\n    case SET_ROUND_RESULT:\r\n      return { ...state, result: action.result };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst user = (state = initialUser, action) => {\r\n  switch (action.type) {\r\n    case SET_IS_AUTHENTICATED:\r\n      return { ...state, isAuthenticated: action.state };\r\n    case SET_TOKEN:\r\n      return { ...state, accessToken: action.token };\r\n    case SET_USERNAME:\r\n      return { ...state, userName: action.name };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst error = (state = intialError, action) => {\r\n  switch (action.type) {\r\n    case SET_ERROR_MESSAGE:\r\n      return { ...state, message: action.message, id: action.id };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({ score, round, user, error });\r\n\r\nexport default rootReducer;\r\n","const routes = {\r\n  home: '/',\r\n  play: '/play',\r\n  login: '/login'\r\n};\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Container,\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavItem\r\n} from 'reactstrap';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport routes from '../utils/routes';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const displayGreetings = this.props.isLoggedIn && this.props.userName;\r\n    const greetings = (\r\n      <NavItem className=\"mr-5\">\r\n        <span className=\"navbar-text\">{this.props.userName}</span>\r\n      </NavItem>\r\n    );\r\n\r\n    return (\r\n      <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n        <Container>\r\n          <Link className=\"navbar-brand\" to={routes.home}>\r\n            RPS\r\n          </Link>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              {displayGreetings && greetings}\r\n              <NavItem>\r\n                <NavLink\r\n                  exact\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                  to={routes.home}\r\n                >\r\n                  Home\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                  to={routes.play}\r\n                >\r\n                  Play\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                  to={routes.login}\r\n                >\r\n                  {this.props.isLoggedIn ? 'Log Out' : 'Log In  '}\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nNavigationBar.propTypes = {\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  userName: PropTypes.string.isRequired\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport NavigationBar from '../components/NavigationBar';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoggedIn: state.user.isAuthenticated,\r\n    userName: state.user.userName\r\n  };\r\n};\r\n\r\nconst ConnectedNavigationBar = withRouter(\r\n  connect(mapStateToProps)(NavigationBar)\r\n);\r\n\r\nexport default ConnectedNavigationBar;\r\n","import { GameStatus, Rps } from './enums';\r\n\r\nexport default class GameLogic {\r\n  static calculateRoundResult(playerSelection, opponentSelection) {\r\n    if (playerSelection === opponentSelection) {\r\n      return GameStatus.Tie;\r\n    }\r\n    if (\r\n      (playerSelection === Rps.Scissors && opponentSelection === Rps.Paper) ||\r\n      (playerSelection === Rps.Paper && opponentSelection === Rps.Rock) ||\r\n      (playerSelection === Rps.Rock && opponentSelection === Rps.Scissors)\r\n    ) {\r\n      return GameStatus.Win;\r\n    } else {\r\n      return GameStatus.Loss;\r\n    }\r\n  }\r\n\r\n  static drawOpponentSelection() {\r\n    //The maximum is exclusive and the minimum is inclusive\r\n    const getRandomInt = (min, max) => {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min)) + min;\r\n    };\r\n\r\n    return Rps.get(getRandomInt(0, 3));\r\n  }\r\n}\r\n","import { GameStatus } from './enums';\r\n\r\nexport default class ScoreLogic {\r\n  static calculateCurrentScore(currentScore, gameResult) {\r\n    switch (gameResult) {\r\n      case GameStatus.Win:\r\n        return currentScore + 1;\r\n      case GameStatus.Loss:\r\n        return 0;\r\n      case GameStatus.Tie:\r\n        return currentScore;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  static isNewBestScore(currentScore, bestScore) {\r\n    return currentScore > bestScore;\r\n  }\r\n}\r\n","export const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '';\r\nexport const API_DOMAIN =\r\n  process.env.REACT_APP_API_DOMAIN || 'http://localhost:5000';\r\nexport const API_AUTH_GOOGLE_ROUTE =\r\n  process.env.REACT_APP_API_AUTH_GOOGLE_ROUTE || '/user/auth/google/';\r\nexport const API_USER_SCORE_ROUTE =\r\n  process.env.REACT_APP_API_USER_SCORE_ROUTE || '/user/score/';\r\n","import GameLogic from '../utils/GameLogic';\r\nimport ScoreLogic from '../utils/ScoreLogic';\r\nimport { GameStatus } from '../utils/enums';\r\nimport routes from '../utils/routes';\r\nimport { getTokenAndBestScore, sendBestScore } from '../utils/apiCalls';\r\nimport {\r\n  setBestScore,\r\n  setCurrentScore,\r\n  setPlayerSelection,\r\n  setAccessToken,\r\n  setIsAuthenticated,\r\n  setOpponentSelection,\r\n  setRoundResult,\r\n  setUserName,\r\n  setErrorMessage\r\n} from './actions';\r\n\r\nexport const processRound = playerSelection => {\r\n  return (dispatch, getState) => {\r\n    dispatch(setPlayerSelection(playerSelection));\r\n    dispatch(setOpponentSelection(GameLogic.drawOpponentSelection()));\r\n    dispatch(\r\n      setRoundResult(\r\n        GameLogic.calculateRoundResult(\r\n          getState().round.playerSelection,\r\n          getState().round.opponentSelection\r\n        )\r\n      )\r\n    );\r\n    dispatch(\r\n      setCurrentScore(\r\n        ScoreLogic.calculateCurrentScore(\r\n          getState().score.current,\r\n          getState().round.result\r\n        )\r\n      )\r\n    );\r\n    if (\r\n      ScoreLogic.isNewBestScore(getState().score.current, getState().score.best)\r\n    ) {\r\n      dispatch(setBestScore(getState().score.current));\r\n      if (getState().user.isAuthenticated) {\r\n        sendBestScore(getState().score.best, getState().user.accessToken).then(\r\n          null,\r\n          () => dispatch(setErrorMessage('Connection to server failed'))\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const resetGame = () => {\r\n  return dispatch => {\r\n    dispatch(setPlayerSelection(null));\r\n    dispatch(setOpponentSelection(null));\r\n    dispatch(setRoundResult(GameStatus.Init));\r\n    dispatch(setCurrentScore(0));\r\n  };\r\n};\r\n\r\nexport const responseGoogleSuccess = (response, history) => {\r\n  return dispatch => {\r\n    const userName = response.profileObj.givenName;\r\n\r\n    getTokenAndBestScore(response.accessToken)\r\n      .then(res => {\r\n        if (res.token) {\r\n          history.push(routes.home);\r\n          dispatch(setIsAuthenticated(true));\r\n          dispatch(setAccessToken(res.token));\r\n          dispatch(setBestScore(res.bestScore));\r\n          userName && dispatch(setUserName(userName));\r\n        }\r\n      })\r\n      .catch(() => dispatch(setErrorMessage('Connection to server failed')));\r\n  };\r\n};\r\n\r\nexport const responseGoogleFailure = response => {\r\n  return dispatch => {\r\n    dispatch(setErrorMessage(response.error));\r\n  };\r\n};\r\n\r\nexport const logout = history => {\r\n  return dispatch => {\r\n    history.push(routes.home);\r\n    dispatch(setIsAuthenticated(false));\r\n    dispatch(setAccessToken(''));\r\n    dispatch(setBestScore(0));\r\n  };\r\n};\r\n","import {\r\n  API_DOMAIN,\r\n  API_AUTH_GOOGLE_ROUTE,\r\n  API_USER_SCORE_ROUTE\r\n} from './config';\r\n\r\nexport const getTokenAndBestScore = token => {\r\n  const init = {\r\n    method: 'GET',\r\n    headers: new Headers({\r\n      access_token: token\r\n    })\r\n  };\r\n\r\n  return fetch(API_DOMAIN + API_AUTH_GOOGLE_ROUTE, init).then(res =>\r\n    res.json()\r\n  );\r\n};\r\n\r\nexport const sendBestScore = (score, token) => {\r\n  const init = {\r\n    method: 'PUT',\r\n    body: JSON.stringify({ bestScore: score }),\r\n    headers: new Headers({\r\n      Authorization: 'Bearer ' + token,\r\n      'content-type': 'application/json'\r\n    })\r\n  };\r\n\r\n  return fetch(API_DOMAIN + API_USER_SCORE_ROUTE, init);\r\n};\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { Rps } from '../utils/enums';\r\nimport rock from '../images/rock.svg';\r\nimport paper from '../images/paper.svg';\r\nimport scissors from '../images/scissors.svg';\r\nimport './OpponentRpsIcons.css';\r\n\r\nconst OpponentRpsIcons = props => {\r\n  const selectedColor = 'bg-info';\r\n  const defaultColor = 'bg-light';\r\n  const images = [rock, paper, scissors];\r\n\r\n  const icons = Rps.enums.map((item, index) => (\r\n    <div\r\n      className={\r\n        'OpponentRpsIcons-icon ' +\r\n        (props.selected === item ? selectedColor : defaultColor)\r\n      }\r\n      key={item.key}\r\n    >\r\n      <img\r\n        src={images[index]}\r\n        className=\"OpponentRpsIcons-img\"\r\n        alt={item.key}\r\n      />\r\n    </div>\r\n  ));\r\n\r\n  return <Col>{icons}</Col>;\r\n};\r\n\r\nOpponentRpsIcons.propTypes = {\r\n  selected: PropTypes.object\r\n};\r\n\r\nexport default OpponentRpsIcons;\r\n","import React from 'react';\r\nimport { Col, Alert } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { GameStatus } from '../utils/enums';\r\n\r\nconst GameStatusText = props => {\r\n  let color = '';\r\n  let text = '';\r\n  switch (props.status) {\r\n    case GameStatus.Init:\r\n      color = 'info';\r\n      text = 'CHOOSE';\r\n      break;\r\n    case GameStatus.Win:\r\n      color = 'success';\r\n      text = 'WIN';\r\n      break;\r\n    case GameStatus.Loss:\r\n      color = 'danger';\r\n      text = 'LOSS';\r\n      break;\r\n    case GameStatus.Tie:\r\n      color = 'warning';\r\n      text = 'TIE';\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Col xs=\"6\">\r\n      <Alert color={color}>\r\n        <h4>{text}</h4>\r\n      </Alert>\r\n    </Col>\r\n  );\r\n};\r\n\r\nGameStatusText.propTypes = {\r\n  status: PropTypes.object.isRequired\r\n};\r\n\r\nexport default GameStatusText;\r\n","import React from 'react';\r\nimport { Col, Button } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { Rps } from '../utils/enums';\r\nimport rock from '../images/rock.svg';\r\nimport paper from '../images/paper.svg';\r\nimport scissors from '../images/scissors.svg';\r\nimport './PlayerRpsButtons.css';\r\n\r\nconst PlayerRpsButtons = props => {\r\n  const selectedColor = 'info';\r\n  const defaultColor = 'light';\r\n  const images = [rock, paper, scissors];\r\n\r\n  const buttons = Rps.enums.map((item, index) => (\r\n    <Button\r\n      color={props.selected === item ? selectedColor : defaultColor}\r\n      onClick={() => props.onClick(item)}\r\n      className=\"PlayerRpsButtons-button\"\r\n      key={item.key}\r\n    >\r\n      <img\r\n        src={images[index]}\r\n        className=\"PlayerRpsButtons-img\"\r\n        alt={item.key}\r\n      />\r\n    </Button>\r\n  ));\r\n\r\n  return <Col>{buttons}</Col>;\r\n};\r\n\r\nPlayerRpsButtons.propTypes = {\r\n  onClick: PropTypes.func,\r\n  selected: PropTypes.object\r\n};\r\n\r\nexport default PlayerRpsButtons;\r\n","import React from 'react';\r\nimport { Badge, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport './ScoreBox.css';\r\n\r\nconst ScoreBox = props => (\r\n  <Col sm=\"6\" className=\"py-2\">\r\n    <span className=\"ScoreBox\">\r\n      {props.text} <Badge color=\"secondary\">{props.score}</Badge>\r\n    </span>\r\n  </Col>\r\n);\r\n\r\nScoreBox.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  score: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ScoreBox;\r\n","import React from 'react';\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport OpponentRpsIcons from './OpponentRpsIcons';\r\nimport GameStatusText from './GameStatusText';\r\nimport PlayerRpsButtons from './PlayerRpsButtons';\r\nimport ScoreBox from './ScoreBox';\r\n\r\nexport default class GameView extends React.Component {\r\n  componentWillUnmount() {\r\n    this.props.handleUnmount();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"mb-4\">\r\n        <Row className=\"mb-4\">\r\n          <ScoreBox text=\"Best Streak\" score={this.props.bestScore} />\r\n          <ScoreBox text=\"Current Streak\" score={this.props.currentScore} />\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5 className=\"text-danger\">OPPONENT</h5>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-4\">\r\n          <OpponentRpsIcons selected={this.props.opponentSelection} />\r\n        </Row>\r\n        <Row className=\"justify-content-center mb-4\">\r\n          <GameStatusText status={this.props.result} />\r\n        </Row>\r\n        <Row>\r\n          <PlayerRpsButtons\r\n            selected={this.props.playerSelection}\r\n            onClick={this.props.handlePlayerRpsButtonClick}\r\n          />\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h4 className=\"text-success mb-4\">PLAYER</h4>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nGameView.propTypes = {\r\n  bestScore: PropTypes.number.isRequired,\r\n  currentScore: PropTypes.number.isRequired,\r\n  opponentSelection: PropTypes.object,\r\n  result: PropTypes.object.isRequired,\r\n  playerSelection: PropTypes.object,\r\n  handlePlayerRpsButtonClick: PropTypes.func.isRequired,\r\n  handleUnmount: PropTypes.func.isRequired\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { processRound, resetGame } from '../redux/thunks';\r\nimport GameView from '../components/GameView';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    bestScore: state.score.best,\r\n    currentScore: state.score.current,\r\n    playerSelection: state.round.playerSelection,\r\n    opponentSelection: state.round.opponentSelection,\r\n    result: state.round.result\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handlePlayerRpsButtonClick: playerSelection => {\r\n      dispatch(processRound(playerSelection));\r\n    },\r\n    handleUnmount: () => {\r\n      dispatch(resetGame());\r\n    }\r\n  };\r\n};\r\n\r\nconst ConnectedGameView = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameView);\r\n\r\nexport default ConnectedGameView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../utils/routes';\r\nimport ScoreBox from './ScoreBox';\r\n\r\nconst MenuView = props => (\r\n  <Container className=\"mb-4\">\r\n    <Row>\r\n      <Col>\r\n        <h1>Rock-Paper-Scissors</h1>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <h5>by Jarmo</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-2\">\r\n      <Col>\r\n        <Link className=\"btn btn-info\" to={routes.play}>\r\n          Play\r\n        </Link>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-4\">\r\n      <Col>\r\n        <Link className=\"btn btn-info\" to={routes.login}>\r\n          Login\r\n        </Link>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"justify-content-md-center\">\r\n      <ScoreBox text=\"Best Streak\" score={props.bestScore} />\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nMenuView.propTypes = {\r\n  bestScore: PropTypes.number.isRequired\r\n};\r\n\r\nexport default MenuView;\r\n","import { connect } from 'react-redux';\r\nimport MenuView from '../components/MenuView';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    bestScore: state.score.best\r\n  };\r\n};\r\n\r\nconst ConnectedMenuView = connect(mapStateToProps)(MenuView);\r\n\r\nexport default ConnectedMenuView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardBody, CardTitle, Col, Container, Row } from 'reactstrap';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nimport { GOOGLE_CLIENT_ID } from '../utils/config';\r\nimport './LoginView.css';\r\n\r\nconst LoginView = props => {\r\n  const loginButton = (\r\n    <GoogleLogin\r\n      className=\"LoginView-GoogleLogin\"\r\n      clientId={GOOGLE_CLIENT_ID}\r\n      buttonText=\"\"\r\n      onSuccess={response =>\r\n        props.handleGoogleLoginSuccess(response, props.history)\r\n      }\r\n      onFailure={props.handleGoogleLoginFailure}\r\n    />\r\n  );\r\n  const logoutButton = (\r\n    <GoogleLogout\r\n      className=\"btn btn-info\"\r\n      buttonText=\"Log Out\"\r\n      onLogoutSuccess={() => props.handleLogout(props.history)}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Container className=\"mb-4\">\r\n      <Row>\r\n        <Col xs=\"12\" sm={{ size: 6, offset: 3 }}>\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle className=\"mb-4\">\r\n                {!props.isLoggedIn ? 'Log In' : 'Log Out'}\r\n              </CardTitle>\r\n              {props.isLoggedIn ? logoutButton : loginButton}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nLoginView.propTypes = {\r\n  isLoggedIn: PropTypes.bool.isRequired,\r\n  handleGoogleLoginSuccess: PropTypes.func.isRequired,\r\n  handleGoogleLoginFailure: PropTypes.func.isRequired,\r\n  handleLogout: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired\r\n};\r\n\r\nexport default LoginView;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  responseGoogleSuccess,\r\n  responseGoogleFailure,\r\n  logout\r\n} from '../redux/thunks';\r\nimport LoginView from '../components/LoginView';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoggedIn: state.user.isAuthenticated\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleGoogleLoginSuccess: (response, history) => {\r\n      dispatch(responseGoogleSuccess(response, history));\r\n    },\r\n    handleGoogleLoginFailure: response => {\r\n      dispatch(responseGoogleFailure(response));\r\n    },\r\n    handleLogout: history => {\r\n      dispatch(logout(history));\r\n    }\r\n  };\r\n};\r\n\r\nconst ConnectedLoginView = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LoginView);\r\n\r\nexport default ConnectedLoginView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport default class ErrorAlert extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      visible: false\r\n    };\r\n\r\n    this.onDismiss = this.onDismiss.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!prevState.visible && prevProps.errorId !== this.props.errorId) {\r\n      this.setState({ visible: true });\r\n    }\r\n\r\n    if (prevState.visible && this.props.location !== prevProps.location) {\r\n      this.setState({ visible: false });\r\n    }\r\n  }\r\n\r\n  onDismiss() {\r\n    this.setState({ visible: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Alert color=\"danger\" isOpen={this.state.visible} toggle={this.onDismiss}>\r\n        Error: {this.props.errorMessage}\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nErrorAlert.propTypes = {\r\n  errorMessage: PropTypes.string,\r\n  errorId: PropTypes.number,\r\n  location: PropTypes.object.isRequired\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ErrorAlert from '../components/ErrorAlert';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    errorMessage: state.error.message,\r\n    errorId: state.error.id\r\n  };\r\n};\r\n\r\nconst ConnectedErrorAlert = withRouter(connect(mapStateToProps)(ErrorAlert));\r\n\r\nexport default ConnectedErrorAlert;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport routes from '../utils/routes';\r\nimport ConnectedNavigationBar from '../containers/ConnectedNavigationBar';\r\nimport ConnectedGameView from '../containers/ConnectedGameView';\r\nimport ConnectedMenuView from '../containers/ConnectedMenuView';\r\nimport ConnectedLoginView from '../containers/ConnectedLoginView';\r\nimport ConnectedErrorAlert from '../containers/ConnectedErrorAlert';\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <ConnectedNavigationBar />\r\n    <Switch>\r\n      <Route exact path={routes.home} component={ConnectedMenuView} />\r\n      <Route path={routes.play} component={ConnectedGameView} />\r\n      <Route path={routes.login} component={ConnectedLoginView} />\r\n    </Switch>\r\n    <ConnectedErrorAlert />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './redux/reducers';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './components/App';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router basename={'/rps-app-client/'}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}